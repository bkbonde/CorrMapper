"""
Utility functions for D3 correlation maps.

Functions to:
 - plot heatmaps of R^2 matrices
 - generate and draw network of R^2 matrices
"""

import numpy as np
import networkx as nx


def create_network(r, p, sym, modules=False):
    """
    Creates a network from a R and p-val pandas DataFrames.

    Generates a bipartite graph if the columns and index of the provided
    DataFrame is different. Otherwise just a regular graph.

    If sym=True, it will not generate a bipartite graph.

    """
    B = nx.Graph()
    for ri, row in enumerate(r.index):
        for ci, col in enumerate(r.columns):
            if not sym and r[col][row] != 0:
                B = add_node(B, row, 0)
                B = add_node(B, col, 1)
                B.add_edge(row, col, r=float(r[col][row]), p=float(p[col][row]))
            else:
                # if the matrix is symmetric, we only use the upper triangle
                if ci > ri and r[col][row] != 0:
                    B = add_node(B, row, 0)
                    B = add_node(B, col, 0)
                    # if we're building network for module finding
                    if modules:
                        B.add_edge(row, col,weight=abs(float(r[col][row])))
                    else:
                        B.add_edge(row, col, r=float(r[col][row]),
                                   p=float(p[col][row]))
    return B


def add_node(B, node, bipartite):
    if not B.has_node(node):
        B.add_node(node, bipartite=bipartite)
    return B

# ------------------------------------------------------------------------------
# THE FUNCTIONS BELOW ARE NOT USED BY CORRMAPPER BUT COULD BE USED TO PLOT ANY
# NETWORK OR HEATMAP OFFLINE
# ------------------------------------------------------------------------------


def plot_heatmap(data, title='Heatmap'):
    """
    This plots a headmap of the provided DataFrame.
    """
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    import matplotlib

    # labels, data
    xlab = list(data.columns.values)
    ylab = list(data.index.values)
    r = data.values

    # basics for plotting
    colormap = plt.get_cmap('seismic')
    vmin = r.min()
    vmax = r.max()
    my_norm = matplotlib.colors.Normalize(vmin, vmax, True)

    # helper for cleaning up axes by removing ticks, tick labels, frame, etc.
    def clean_axis(ax):
        ax.get_xaxis().set_ticks([])
        ax.get_yaxis().set_ticks([])
        for sps in ax.spines.values():
            sps.set_visible(False)

    # plotting
    fig = plt.figure(figsize=(20,10),facecolor='white')
    gigaplot = gridspec.GridSpec(1, 2, wspace=0.0, hspace=0.0,
                                 width_ratios=[0.01,0.99])

    # heatmap
    hm = fig.add_subplot(gigaplot[0,1])
    ax = hm.imshow(r, interpolation='nearest', aspect='auto', origin='lower',
                   norm=my_norm, cmap=colormap)
    clean_axis(hm)
    plt.title(title)
    hm.grid(True)
    hm.set_yticks(np.arange(r.shape[0]))
    hm.yaxis.set_ticks_position('right')
    hm.set_yticklabels(ylab)
    hm.set_xticks(np.arange(r.shape[1]))
    xlabelsL = hm.set_xticklabels(xlab)

    # rotate labels 90 degrees
    for label in xlabelsL:
        label.set_rotation(90)
    # remove the tick lines
    for l in hm.get_xticklines() + hm.get_yticklines():
        l.set_markersize(0)

    # colorbar
    cbx = fig.add_subplot(gigaplot[0,0])
    clean_axis(cbx)
    cb = fig.colorbar(ax, cbx)
    cb.ax.set_label('R^2')
    cb.ax.yaxis.set_ticks_position('left')
    cb.ax.yaxis.set_label_position('left')
    cb.ax.set_xticks(0)
    cb.ax.set_xticklabels('')
    cb.outline.set_linewidth(0)

    # make colorbar labels smaller
    tickL = cb.ax.yaxis.get_ticklabels()
    for txt in tickL:
        txt.set_fontsize(txt.get_fontsize() - 3)

    gigaplot.tight_layout(fig,h_pad=0.1,w_pad=0.1)


def plot_network(B):
    """
    Plots network generated by create_network()
    """
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    import matplotlib

    top_nodes = set(n for n,d in B.nodes(data=True) if d['bipartite']==0)
    bottom_nodes = set(B) - top_nodes
    pos = nx.graphviz_layout(B,)

    # reorder the row and col colors according to the B graph
    edge_strength = []
    for i in B.edges_iter():
        r = B.get_edge_data(i[0],i[1])['r']
        edge_strength.append(r)

    nx.draw_networkx_nodes(B, pos, nodelist=top_nodes,node_shape='o',font_size=8, node_color='#CACABC', alpha=.7, font_color='w', node_size = 200)
    nx.draw_networkx_nodes(B, pos, nodelist=bottom_nodes,node_shape='s',font_size=8, node_color='#797971',alpha=.7, font_color='w', node_size = 200)
    nx.draw_networkx_edges(B, pos, edge_cmap=plt.get_cmap('seismic'), edge_color=edge_strength, alpha=.7, width=np.abs(edge_strength)*10)